// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
async function fetchTransactions(filters = {}) {
  const token = localStorage.getItem("token"); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage

  const url = new URL("http://localhost:8080/api/transactions");
  console.log("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:", filters); // –û—Ç–ª–∞–¥–∫–∞: —Ñ–∏–ª—å—Ç—Ä—ã
  console.log("üåê URL –∑–∞–ø—Ä–æ—Å–∞:", url.toString()); // –û—Ç–ª–∞–¥–∫–∞: —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ URL
  Object.keys(filters).forEach((key) => {
    if (filters[key]) {
      url.searchParams.append(key, filters[key]);
    }
  });

  try {
    const response = await fetch(url, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        "Content-Type": "application/json",
      },
    });

    if (response.ok) {
      const data = await response.json();
      console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", data); // –û—Ç–ª–∞–¥–∫–∞: –æ—Ç–≤–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
      updateTransactionsTable(data); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  }
}

function translateEnum(field, value) {
  return enumTranslations[field]?.[value] || value;
}
const enumTranslations = {
  category: {
    SALARY: "–ó–∞—Ä–ø–ª–∞—Ç–∞",
    GROCERIES: "–ü—Ä–æ–¥—É–∫—Ç—ã",
    TRANSPORT: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    UTILITIES: "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏",
    ENTERTAINMENT: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    HEALTH: "–ó–¥–æ—Ä–æ–≤—å–µ",
    INVESTMENTS: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    EDUCATION: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
  },
  type: {
    INCOME: "–î–æ—Ö–æ–¥",
    EXPENSE: "–†–∞—Å—Ö–æ–¥",
  },
  paymentMethod: {
    CARD: "–ö–∞—Ä—Ç–∞",
    CASH: "–ù–∞–ª–∏—á–Ω—ã–µ",
    BANK: "–ë–∞–Ω–∫",
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function updateTransactionsTable(data) {
  console.log("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", data.length); // –û—Ç–ª–∞–¥–∫–∞: —Å–∫–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏—à–ª–æ

  const tableBody = document.getElementById("transactions-body");
  if (!tableBody) {
    console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å id 'transactions-body'");
    return;
  }
  tableBody.innerHTML = ""; // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

  if (data.length === 0) {
    tableBody.innerHTML =
      "<tr><td colspan='6'>–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</td></tr>";
    return; // –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  }

  data.forEach((transaction) => {
    console.log("üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", transaction);
    const row = document.createElement("tr");
    row.innerHTML = `
  <td>${transaction.date}</td>
  <td>${translateEnum("category", transaction.category)}</td>
  <td>${transaction.account}</td>
  <td>${transaction.amount}</td>
  <td>${translateEnum("type", transaction.type)}</td>
  <td>
    <button class="btn-edit" onclick="editTransaction(${
      transaction.id
    })">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
    <button class="btn-delete" onclick="deleteTransaction(${
      transaction.id
    })">–£–¥–∞–ª–∏—Ç—å</button>
  </td>
`;
    tableBody.appendChild(row);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã)
async function fetchTransactionStats() {
  const token = localStorage.getItem("token"); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
  try {
    const response = await fetch(
      "http://localhost:8080/api/transactions/stats",
      {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        },
      }
    );

    if (!response.ok) {
      throw new Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    }

    const stats = await response.json();
    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", stats); // –û—Ç–ª–∞–¥–∫–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    updateChartData(stats); // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
function updateChartData(stats) {
  const ctx = document.getElementById("weeklyProgressChart").getContext("2d");
  console.log("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:", stats); // –û—Ç–ª–∞–¥–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞

  const chartData = {
    labels: stats.labels, // –ú–µ—Å—è—Ü—ã –∏–ª–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    datasets: [
      {
        label: "–î–æ—Ö–æ–¥—ã",
        data: stats.incomeData,
        backgroundColor: "rgba(75, 192, 192, 0.2)",
        borderColor: "rgba(75, 192, 192, 1)",
        borderWidth: 1,
      },
      {
        label: "–†–∞—Å—Ö–æ–¥—ã",
        data: stats.expenseData,
        backgroundColor: "rgba(255, 99, 132, 0.2)",
        borderColor: "rgba(255, 99, 132, 1)",
        borderWidth: 1,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    scales: {
      y: {
        beginAtZero: true,
      },
    },
  };

  new Chart(ctx, {
    type: "bar",
    data: chartData,
    options: chartOptions,
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function addTransaction(transactionData) {
  const token = localStorage.getItem("token"); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
  console.log("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:", transactionData); // –û—Ç–ª–∞–¥–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

  try {
    const response = await fetch("http://localhost:8080/api/transactions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(transactionData),
    });

    if (!response.ok) {
      throw new Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    }

    const newTransaction = await response.json();
    console.log("‚úÖ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:", newTransaction);
    fetchTransactions(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function deleteTransaction(transactionId) {
  const token = localStorage.getItem("token");
  console.log("üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å ID:", transactionId); // –û—Ç–ª–∞–¥–∫–∞: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

  try {
    const response = await fetch(
      `http://localhost:8080/api/transactions/${transactionId}`,
      {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    if (!response.ok) {
      throw new Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
    }

    console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ —Å ID:", transactionId);
    fetchTransactions(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function editTransaction(transactionId) {
  const token = localStorage.getItem("token");
  console.log("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å ID:", transactionId); // –û—Ç–ª–∞–¥–∫–∞: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

  try {
    const response = await fetch(
      `http://localhost:8080/api/transactions/${transactionId}`,
      {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );

    if (!response.ok) {
      throw new Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    }

    const transaction = await response.json();
    console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", transaction);
    fillTransactionForm(transaction); // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
      error
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function fillTransactionForm(transaction) {
  document.getElementById("transaction-date").value = transaction.date;
  document.getElementById("transaction-category").value = transaction.category;
  document.getElementById("transaction-account").value = transaction.account;
  document.getElementById("transaction-amount").value = transaction.amount;
  document.getElementById("transaction-type").value = transaction.type;
  document.getElementById("transaction-description").value =
    transaction.description;
  document.getElementById("transaction-modal").style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.querySelector(".close-modal").addEventListener("click", () => {
  document.getElementById("transaction-modal").style.display = "none";
});

// –û—Ç–ª–∞–¥–∫–∞: –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞
document.addEventListener("DOMContentLoaded", () => {
  console.log("üåê DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º fetchTransactions()");
  fetchTransactions(); // –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
});

// document.addEventListener("DOMContentLoaded", function () {
//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
//   const transactions = JSON.parse(localStorage.getItem("transactions")) || [];
//   const tbody = document.getElementById("transactions-body");
//   const currencyToggle = document.getElementById("currency-toggle");
//   const modal = document.getElementById("transaction-modal");
//   const transactionForm = document.getElementById("transaction-form");
//   const addTransactionBtn = document.getElementById("add-transaction");
//   const applyFiltersBtn = document.getElementById("apply-filters");
//   const resetFiltersBtn = document.getElementById("reset-filters");
//   const typeFilter = document.getElementById("type-filter");
//   const categoryFilter = document.getElementById("category-filter");
//   const accountFilter = document.getElementById("account-filter");
//   const amountMin = document.getElementById("amount-min");
//   const amountMax = document.getElementById("amount-max");
//   const dateStart = document.getElementById("date-start");
//   const dateEnd = document.getElementById("date-end");

//   let currentCurrencyIndex = 0;
//   let currentEditingId = null;

//   // –í–∞–ª—é—Ç–∞
//   const currencies = [
//     { code: "RUB", symbol: "‚ÇΩ", rate: 1 },
//     { code: "USD", symbol: "$", rate: 0.011 },
//     { code: "EUR", symbol: "‚Ç¨", rate: 0.01 },
//   ];

//   // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—á–µ—Ç–∞
//   const categories = [
//     "–ü—Ä–æ–¥—É–∫—Ç—ã",
//     "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
//     "–ñ–∏–ª—å—ë",
//     "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
//     "–ó–∞—Ä–ø–ª–∞—Ç–∞",
//     "–ü–æ–¥–∞—Ä–∫–∏",
//     "–ó–¥–æ—Ä–æ–≤—å–µ",
//     "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
//     "–î—Ä—É–≥–æ–µ",
//   ];

//   const accounts = ["–ö–∞—Ä—Ç–∞", "–ù–∞–ª–∏—á–Ω—ã–µ", "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "–î—Ä—É–≥–æ–µ"];

//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞
//   const today = new Date();
//   const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
//   const lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

//   dateStart.valueAsDate = firstDayOfMonth;
//   dateEnd.valueAsDate = lastDayOfMonth;

//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
//   init();

//   function init() {
//     // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
//     if (transactions.length === 0) {
//       loadDemoData();
//     }

//     setupEventListeners();
//     renderTransactions();
//     renderWeeklyChart();
//   }

//   function setupEventListeners() {
//     // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
//     currencyToggle.addEventListener("click", toggleCurrency);

//     // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è
//     addTransactionBtn.addEventListener("click", () =>
//       openModal("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
//     );

//     document.querySelectorAll(".close-modal").forEach((btn) => {
//       btn.addEventListener("click", closeModal);
//     });

//     // –§–æ—Ä–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
//     transactionForm.addEventListener("submit", handleFormSubmit);

//     // –§–∏–ª—å—Ç—Ä—ã
//     applyFiltersBtn.addEventListener("click", renderTransactions);
//     resetFiltersBtn.addEventListener("click", resetFilters);

//     // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
//     tbody.addEventListener("click", handleTableClick);
//   }

//   function handleTableClick(e) {
//     const target = e.target;
//     const editBtn = target.closest(".edit");
//     const deleteBtn = target.closest(".delete");

//     if (editBtn) {
//       const id = editBtn.dataset.id;
//       editTransaction(id);
//     } else if (deleteBtn) {
//       const id = deleteBtn.dataset.id;
//       deleteTransaction(id);
//     }
//   }

//   function handleFormSubmit(e) {
//     e.preventDefault();
//     const formData = Object.fromEntries(new FormData(transactionForm));
//     saveTransaction(formData);
//   }

//   function toggleCurrency() {
//     currentCurrencyIndex = (currentCurrencyIndex + 1) % currencies.length;
//     currencyToggle.textContent = currencies[currentCurrencyIndex].symbol;
//     renderTransactions();
//     renderWeeklyChart();
//   }

//   function resetFilters() {
//     typeFilter.value = "all";
//     categoryFilter.value = "all";
//     accountFilter.value = "all";
//     amountMin.value = "";
//     amountMax.value = "";
//     dateStart.valueAsDate = firstDayOfMonth;
//     dateEnd.valueAsDate = lastDayOfMonth;
//     renderTransactions();
//   }

//   // –†–µ–Ω–¥–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
//   function renderTransactions() {
//     const filteredTransactions = filterTransactions();
//     tbody.innerHTML = "";

//     const currency = currencies[currentCurrencyIndex];
//     const averageExpense = calculateAverageExpense(filteredTransactions);

//     if (filteredTransactions.length === 0) {
//       tbody.innerHTML = `
//         <tr>
//           <td colspan="6" class="no-transactions">–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º</td>
//         </tr>
//       `;
//       return;
//     }

//     filteredTransactions.forEach((t) => {
//       const tr = document.createElement("tr");
//       const convertedAmount = t.amount * currency.rate;
//       const highlightClass =
//         t.type === "expense" && t.amount > averageExpense ? "highlight" : "";

//       tr.innerHTML = `
//         <td>${formatDate(t.date)}</td>
//         <td>${t.category}</td>
//         <td>${t.account}</td>
//         <td class="${t.type} ${highlightClass}">${formatCurrency(
//         convertedAmount,
//         currency
//       )}</td>
//         <td><span class="transaction-type ${t.type}">${
//         t.type === "income" ? "–î–æ—Ö–æ–¥" : "–†–∞—Å—Ö–æ–¥"
//       }</span></td>
//         <td class="actions">
//           <button class="edit" data-id="${
//             t.id
//           }"><i class="bx bx-edit"></i></button>
//           <button class="delete" data-id="${
//             t.id
//           }"><i class="bx bx-trash"></i></button>
//         </td>
//       `;
//       tbody.appendChild(tr);
//     });
//   }

//   // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
//   function filterTransactions() {
//     return transactions.filter((t) => {
//       // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
//       if (typeFilter.value !== "all" && t.type !== typeFilter.value)
//         return false;

//       // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
//       if (categoryFilter.value !== "all" && t.category !== categoryFilter.value)
//         return false;

//       // –§–∏–ª—å—Ç—Ä –ø–æ —Å—á–µ—Ç—É
//       if (accountFilter.value !== "all" && t.account !== accountFilter.value)
//         return false;

//       // –§–∏–ª—å—Ç—Ä –ø–æ —Å—É–º–º–µ
//       const amount = t.amount;
//       if (amountMin.value && amount < parseFloat(amountMin.value)) return false;
//       if (amountMax.value && amount > parseFloat(amountMax.value)) return false;

//       // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
//       const transactionDate = new Date(t.date);
//       const startDate = dateStart.valueAsDate;
//       const endDate = dateEnd.valueAsDate;

//       if (startDate && transactionDate < startDate) return false;
//       if (endDate && transactionDate > endDate) return false;

//       return true;
//     });
//   }

//   // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
//   function calculateAverageExpense(transactionsList) {
//     const expenses = transactionsList
//       .filter((t) => t.type === "expense")
//       .map((t) => t.amount);

//     return expenses.length > 0
//       ? expenses.reduce((sum, amount) => sum + amount, 0) / expenses.length
//       : 0;
//   }

//   // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
//   function formatDate(dateString) {
//     const date = new Date(dateString);
//     return date.toLocaleDateString("ru-RU");
//   }

//   // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
//   function formatCurrency(value, currency) {
//     return (
//       value.toLocaleString("ru-RU", {
//         minimumFractionDigits: 2,
//         maximumFractionDigits: 2,
//       }) +
//       " " +
//       currency.symbol
//     );
//   }

//   // –†–µ–Ω–¥–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
//   function renderWeeklyChart() {
//     const currency = currencies[currentCurrencyIndex];
//     const labels = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];
//     const daysData = Array(7).fill(0);

//     // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
//     transactions.forEach((t) => {
//       const day = new Date(t.date).getDay(); // 0-6 (–í—Å-–°–±)
//       const index = day === 0 ? 6 : day - 1; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ –ü–Ω-–í—Å (0-6)
//       const convertedAmount = t.amount * currency.rate;
//       daysData[index] +=
//         t.type === "income" ? convertedAmount : -convertedAmount;
//     });

//     const ctx = document.getElementById("weeklyProgressChart").getContext("2d");

//     // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
//     if (window.weeklyChart) {
//       window.weeklyChart.destroy();
//     }

//     window.weeklyChart = new Chart(ctx, {
//       type: "bar",
//       data: {
//         labels: labels,
//         datasets: [
//           {
//             label: "–ë–∞–ª–∞–Ω—Å",
//             data: daysData,
//             backgroundColor: daysData.map((val) =>
//               val >= 0 ? "#2ecc71" : "#e74c3c"
//             ),
//             borderColor: daysData.map((val) =>
//               val >= 0 ? "#2ecc71" : "#e74c3c"
//             ),
//             borderWidth: 1,
//           },
//         ],
//       },
//       options: {
//         responsive: true,
//         maintainAspectRatio: false,
//         plugins: {
//           legend: {
//             display: false,
//           },
//           tooltip: {
//             callbacks: {
//               label: function (context) {
//                 let label = context.dataset.label || "";
//                 if (label) label += ": ";
//                 label += formatCurrency(context.raw, currency);
//                 return label;
//               },
//             },
//           },
//         },
//         scales: {
//           y: {
//             beginAtZero: false,
//             ticks: {
//               callback: function (value) {
//                 return formatCurrency(value, currency);
//               },
//             },
//           },
//         },
//       },
//     });
//   }

//   // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
//   function loadDemoData() {
//     const demoTransactions = [
//       {
//         id: Date.now(),
//         date: new Date().toISOString().split("T")[0],
//         category: "–ó–∞—Ä–ø–ª–∞—Ç–∞",
//         account: "–ö–∞—Ä—Ç–∞",
//         amount: 85000,
//         type: "income",
//         description: "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –∞–ø—Ä–µ–ª—å",
//       },
//       {
//         id: Date.now() + 1,
//         date: new Date(Date.now() - 86400000).toISOString().split("T")[0],
//         category: "–ü—Ä–æ–¥—É–∫—Ç—ã",
//         account: "–ö–∞—Ä—Ç–∞",
//         amount: 3450,
//         type: "expense",
//         description: "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é",
//       },
//       {
//         id: Date.now() + 2,
//         date: new Date(Date.now() - 2 * 86400000).toISOString().split("T")[0],
//         category: "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
//         account: "–ù–∞–ª–∏—á–Ω—ã–µ",
//         amount: 1200,
//         type: "expense",
//         description: "–¢–∞–∫—Å–∏ –¥–æ —Ä–∞–±–æ—Ç—ã",
//       },
//       {
//         id: Date.now() + 3,
//         date: new Date(Date.now() - 3 * 86400000).toISOString().split("T")[0],
//         category: "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
//         account: "–ö–∞—Ä—Ç–∞",
//         amount: 2500,
//         type: "expense",
//         description: "–ö–∏–Ω–æ",
//       },
//       {
//         id: Date.now() + 4,
//         date: new Date(Date.now() - 4 * 86400000).toISOString().split("T")[0],
//         category: "–ü–æ–¥–∞—Ä–∫–∏",
//         account: "–ö–∞—Ä—Ç–∞",
//         amount: 5000,
//         type: "expense",
//         description: "–ü–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
//       },
//     ];

//     demoTransactions.forEach((t) => transactions.push(t));
//     saveTransactions();
//   }

//   // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ localStorage
//   function saveTransactions() {
//     localStorage.setItem("transactions", JSON.stringify(transactions));
//   }

//   // –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
//   function openModal(title, transaction = null) {
//     document.getElementById("modal-title").textContent = title;
//     currentEditingId = transaction ? transaction.id : null;

//     if (transaction) {
//       // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
//       document.getElementById("transaction-date").value = transaction.date;
//       document.getElementById("transaction-category").value =
//         transaction.category;
//       document.getElementById("transaction-account").value =
//         transaction.account;
//       document.getElementById("transaction-amount").value = transaction.amount;
//       document.getElementById("transaction-type").value = transaction.type;
//       document.getElementById("transaction-description").value =
//         transaction.description || "";
//     } else {
//       // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
//       transactionForm.reset();
//       document.getElementById("transaction-date").valueAsDate = new Date();
//     }

//     modal.classList.add("active");
//   }

//   function closeModal() {
//     modal.classList.remove("active");
//     currentEditingId = null;
//   }

//   function saveTransaction(formData) {
//     // –í–∞–ª–∏–¥–∞—Ü–∏—è
//     if (!formData.date || !formData.category || !formData.amount) {
//       alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
//       return;
//     }

//     const amount = parseFloat(formData.amount);
//     if (isNaN(amount)) {
//       alert("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º");
//       return;
//     }

//     const transaction = {
//       id: currentEditingId || Date.now(),
//       date: formData.date,
//       category: formData.category,
//       account: formData.account,
//       amount: Math.abs(amount),
//       type: formData.type,
//       description: formData.description || "",
//     };

//     if (currentEditingId) {
//       // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
//       const index = transactions.findIndex((t) => t.id == currentEditingId);
//       if (index !== -1) {
//         transactions[index] = transaction;
//       }
//     } else {
//       // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
//       transactions.push(transaction);
//     }

//     saveTransactions();
//     renderTransactions();
//     renderWeeklyChart();
//     closeModal();
//   }

//   function editTransaction(id) {
//     const transaction = transactions.find((t) => t.id == id);
//     if (transaction) {
//       openModal("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", transaction);
//     } else {
//       console.error("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", id);
//     }
//   }

//   function deleteTransaction(id) {
//     if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?")) {
//       const index = transactions.findIndex((t) => t.id == id);
//       if (index !== -1) {
//         transactions.splice(index, 1);
//         saveTransactions();
//         renderTransactions();
//         renderWeeklyChart();
//       }
//     }
//   }
// });

////-----------------------------------------------------------/////
